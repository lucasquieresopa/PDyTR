Vagrant.configure("2") do |config|
	# Definición de las máquinas
	config.vm.define "vm1" do |machine|	# vm1 va a ser el que ejecute los programas de servidor

		hostname = "vm1"
		ip = "192.168.56.11"

		machine.vm.box = "hashicorp/bionic64"
		machine.vm.network "private_network", ip: ip
		machine.vm.hostname = hostname

		machine.vm.provider "virtualbox" do |vb|
			vb.memory = "512"
			vb.name = "vm1"
	      	end

	      	machine.vm.provision "shell", inline: <<-SHELL
			# Get updated urls/packages sources? & tools
			apt-get update

			# Get several software packages
			apt-get install -y net-tools debconf-utils joe zip libc-dev-bin build-essential default-jdk

			# The alias for ls
			grep -q "alias ls='ls -la'" /home/vagrant/.bashrc || echo -e "\\nalias ls='ls -la'" >> /home/vagrant/.bashrc

			sudo rm -rf /opt/pdytr
			git clone https://github.com/lucasquieresopa/PDyTR.git /opt/pdytr


			# Disparamos el script

			# Ejecucion punto 2
			cd /opt/pdytr/punto2/
			gcc -o servidor server-full.c
			./servidor 6901 &

			# Ejecucion punto 3
			cd /opt/pdytr/punto3/
			gcc -o servidor server3.c
			./servidor 6902 &


		SHELL
	end

	config.vm.define "vm2" do |machine| # vm2 va a ser el que ejecute los programas de cliente

		hostname = "vm2"
		ip = "192.168.56.12"

		machine.vm.box = "hashicorp/bionic64"
		machine.vm.network "private_network", ip: ip
		machine.vm.hostname = hostname

		machine.vm.provider "virtualbox" do |vb|
			vb.memory = "512"
			vb.name = "vm2"
	      	end

	      	machine.vm.provision "shell", inline: <<-SHELL
			# Get updated urls/packages sources? & tools
			apt-get update

			# Get several software packages
			apt-get install -y net-tools debconf-utils joe zip libc-dev-bin build-essential default-jdk

			# The alias for ls
			grep -q "alias ls='ls -la'" /home/vagrant/.bashrc || echo -e "\\nalias ls='ls -la'" >> /home/vagrant/.bashrc

			sudo rm -rf /opt/pdytr
			git clone https://github.com/lucasquieresopa/PDyTR.git /opt/pdytr

			# Disparar el script para ejecutar los experimentos

			# Punto de sincronizacion
			echo "Esperando a que el servidor (vm1) esté disponible..."

			while true; do
				if ping -c 1 -W 1 192.168.56.11 > /dev/null 2>&1; then
					echo "La máquina responde al ping"
					break   # sale del bucle
				else
					echo "No responde todavía..."
			    		sleep 2
			  	fi
			done
		    	echo "Servidor arriba, ahora ejecuto cliente"

			# En este punto no se garantiza que el servidor esté ejecutando el programa

			# Ejecucion punto 2
			cd /opt/pdytr/punto2/
			gcc -o cliente client-full.c
			./cliente 192.168.56.11 6901

			# Ejecucion punto 3
			cd /opt/pdytr/punto3/
			gcc -o cliente client3.c
			./cliente 192.168.56.11 6902

		SHELL
	end
end